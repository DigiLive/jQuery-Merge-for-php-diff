/**
 * jQuery Merge for php-diff v0.1
 * 
 * A jQuery plugin for handling the conflicts between two documents.
 * Requires [php-diff](https://github.com/chrisboulton/php-diff) on the server side.
 * 
 * https://github.com/Xiphe/jQuery-Merge-for-php-diff
 * Distributed under GNU General Public License.
 */
(function($){"use strict";$.fn.phpdiffmerge=function(userConfig){var config={left:'',right:'',debug:false,pupupResult:false,pupupSources:false,merged:function(){}},$self=this;config=$.extend({},config,userConfig);if(typeof config.button==='undefined'|| !$(config.button).length){config.button=$('<button />').html('Merge').attr('disabled','disabled').css({display:'block',height:'50px',width:'200px',margin:'50px auto'});$self.after(config.button);}else{config.button=$(config.button).attr('disabled','disabled');}this.useRight=function(){$conflicts.find('td.Right').click();if($self.hasClass('DifferencesInline')){$self.find('.ChangeDelete td.Left').click().click();}return $self;};this.useLeft=function(){$conflicts.find('td.Left').click();if($self.hasClass('DifferencesInline')){$self.find('.ChangeInsert td.Right').click().click();}return $self;};function cloneArr(a){var r=[];if(typeof a==='object'&&a.length){$.each(a,function(i,v){r[i]=v;});}return r;}function popup(title,content){var newWin=window.open('popup.html');content=content.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;');newWin.document.write("<html><head><title>"+title+"</title></head><body><pre>"+content+"</pre></body></html>");}function debug(v){if(config.debug&&window.console&&console.log){console.log(v);}}debug('Config: ');debug(config);if(config.left===''&&config.right===''){debug('Nothing to merge or merge sources not available - Please submit left and right on plug-in initiation!');return false;}var $conflicts=$self.find('.ChangeReplace, .ChangeDelete, .ChangeInsert'),toResolve=$conflicts.length;$conflicts.each(function(){var $conflict=$(this);$conflict.find('td').click(function(){var u='Right',d='Left';if($(this).hasClass('Left')){u='Left';d='Right';}if(!$conflict.find('.use, .dontUse').length){toResolve--;}if($self.hasClass('DifferencesInline')&&($conflict.hasClass('ChangeDelete')||$conflict.hasClass('ChangeInsert'))){var $c=$conflict.find('td');$c.toggleClass('use');if($c.hasClass('use')){$c.removeClass('dontUse');}else{$c.addClass('dontUse');}}else{$conflict.find('td.'+u).removeClass('dontUse').addClass('use');$conflict.find('td.'+d).removeClass('use').addClass('dontUse');}if(toResolve===0){config.button.removeAttr('disabled');}}).hover(function(){var h='Right';if($(this).hasClass('Left')){h='Left';}$conflict.find('td.'+h).addClass('hover');},function(){$conflict.find('td').removeClass('hover');});});config.button.click(function(e){var end=cloneArr(config.left),lineOffset=0;e.preventDefault();var attr=$(this).attr('disabled');if(typeof attr!=='undefined'&&attr!==false){return false;}$conflicts.each(function(){var $conflict=$(this),$c=$conflict.find('.use').first(),$prv=$conflict.prev('tbody').find('tr').last(),endLine=parseInt($prv.find('th').first().html(),10)+lineOffset,rightLine=parseInt($prv.find('th').last().html(),10),rows=parseInt($conflict.find('td.Left').length,10),i;if(isNaN(endLine)){endLine=0;}if(isNaN(rightLine)){rightLine=0;}if($c.hasClass('Left')){debug("Ignoring lines "+(endLine+1)+" - "+(endLine+rows)+" because Left will be keeped.");debug('-----');return;}debug("Doing "+$conflict.attr('class')+':');if($conflict.hasClass('ChangeReplace')){var rowsLeft,rowsRight;if($self.hasClass('DifferencesInline')){rowsLeft=$conflict.find('.Left').length;rowsRight=$conflict.find('.Right').length;}else{rowsLeft=0;$conflict.find('.Left').each(function(){if($(this).prev('th').html()!=='&nbsp;'){rowsLeft++;}});rowsRight=0;$conflict.find('.Right').each(function(){if($(this).prev('th').html()!=='&nbsp;'){rowsRight++;}});}debug("Deleting Left: Row "+(endLine+1)+" - "+(endLine+rowsLeft)+" for change to right");for(i=0;i<rowsLeft;i++){end.splice(endLine,1);}debug("Inserting Right: Row "+(rightLine+1)+" - "+(rightLine+rowsRight)+" into Left row "+(endLine+1));for(i=0;i<rowsRight;i++){end.splice(endLine+i,0,config.right[rightLine+i]);}var d=rowsRight-rowsLeft;debug("Manipulating lineOffset ("+lineOffset+") with "+d+".");lineOffset=lineOffset+d;}else if($conflict.hasClass('ChangeInsert')){if($self.hasClass('DifferencesInline')){if($conflict.find('.use').length===0){debug('Skipping due unused.');debug('-----');return;}rows=parseInt($conflict.find('td.Right').length,10);}debug("Inserting Right: Row "+(rightLine+1)+" - "+(rightLine+rows)+" into Left row "+(endLine+1));for(i=0;i<rows;i++){end.splice(endLine+i,0,config.right[rightLine+i]);}debug("Manipulating lineOffset ("+lineOffset+") with "+rows+".");lineOffset+=rows;}else if($conflict.hasClass('ChangeDelete')){debug("Deleting Left: Row "+(endLine+1)+" - "+(endLine+rows)+".");for(i=0;i<rows;i++){end.splice(endLine,1);}debug("Manipulating lineOffset ("+lineOffset+") with "+(rows*-1)+".");lineOffset-=rows;}debug('-----');});if(config.pupupResult){popup('end',end.join("\n"));}if(config.pupupSources){popup('left',config.left.join("\n"));popup('right',config.right.join("\n"));}if(typeof config.merged==='function'){config.merged.call($self,end,config.left,config.right);}});return this;};})(jQuery);